type User {
  _id: ID
  profile: Profile
  accounts: [TelegramAccount]
}

type Profile {
  _id: ID
  owner: ID
  role: String
  fullName: String
  avatar: String
  limit: Int
}

type TelegramAccount {
  _id: ID
  owner: ID
  name: String
  api_id: Int
  api_hash: String
  phone: String
  groups: [Group]
  session_string: String
  telethon: Telethon
}

type Telethon {
  authorized: Boolean
  connected: Boolean
}

type Group {
  id: ID
  title: String
  participantids: [Int]
}

type Message {
  enqueued: Boolean
}

type Query {
  currentUser: User
  account(_id: ID!): TelegramAccount
}

input TelegramAccountInput {
  name: String!
  api_id: String!
  api_hash: String!
  phone: String!
}

input DispatchInput {
  ids: [ID]!
  message: String!
  account: ID!
}

input ValidateCodeInput {
  api_id: String!
  api_hash: String!
  phone: String!
  code: Int!
}

type Mutation {
  enqueueMessage(dispatch: DispatchInput!): Message
  createTelegramAccount(account: TelegramAccountInput!): User
  validateCode(account: ValidateCodeInput!): User
}
